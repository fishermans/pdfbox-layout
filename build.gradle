plugins {
	id "java-library"
	id "maven-publish"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.pdfbox:pdfbox:3.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}



subprojects {

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    apply plugin: "java"
    apply plugin: "maven-publish"

    group = 'com.github.ralfstuckert.pdfbox-layout'
    version = '3.0.0'


    jar {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    javadoc {
        failOnError = false
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task examplesJar(type: Jar, dependsOn: [jar, 'createExamples']) {
        classifier = 'examples'
        from fileTree("examples")
        include '**/*'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives examplesJar
    }

/*
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = group
                artifactId = project.name
                version = version

                from components.java
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/ralfstuckert/pdfbox-layout"
                credentials {
                    username = System.getenv("USERNAME")
                    password = System.getenv("TOKEN")
                }
            }
        }
    }
*/
    task createExamples(description: 'Creates the example pdfs', dependsOn: 'compileExamples') << {
        def oldPdfs = fileTree("examples").include('**/*.pdf')
        oldPdfs.each { file -> file.delete() }
        def examples = fileTree("examples").exclude('**/*.java')
        examples.each { example ->
            def mainClassName = getClassName(example)
            if (mainClassName) {
                javaexec {
                    main = mainClassName
                    classpath = sourceSets.main.compileClasspath
                    workingDir = "$projectDir/examples"
                }
            }
        }

        def classFiles = fileTree("examples").include('**/*.class')
        classFiles.each { file -> file.delete() }
    }


    task compileExamples(type: JavaCompile, dependsOn: 'compileJava') {
        source = fileTree(dir: "examples", include: '**/*.java')
        destinationDir = file("examples")
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        dependencyCacheDir = file("${buildDir}/dependency-cache")
        classpath = sourceSets.main.compileClasspath
    }

}


def getClassName(classFile) {
    def name = classFile.getName();
    if (name.contains('$') || !name.endsWith('.class')) {
        return null
    }
    name = name.substring(0, name.lastIndexOf("."))
    return name
}




